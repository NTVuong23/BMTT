package fakeupdate;

import javax.swing.*;
import java.awt.*;

public class FakeWin10Update {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame();
            frame.setUndecorated(true); 
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().setFullScreenWindow(frame);

            JPanel mainPanel = new JPanel() {
                @Override
                protected void paintComponent(Graphics g) {
                    super.paintComponent(g);
                    Graphics2D g2d = (Graphics2D) g;
                    g2d.setColor(Color.decode("#0078D4"));
                    g2d.fillRect(0, 0, getWidth(), getHeight());
                }
            };
            mainPanel.setLayout(null);

            int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;
            int screenHeight = Toolkit.getDefaultToolkit().getScreenSize().height;

            JLabel progressLabel = new JLabel("Working on updates 0% complete.", SwingConstants.CENTER);
            progressLabel.setForeground(Color.WHITE);
            progressLabel.setFont(new Font("Segoe UI", Font.PLAIN, 18));
            progressLabel.setBounds(0, screenHeight / 2 - 50, screenWidth, 30);
            mainPanel.add(progressLabel);

            JLabel messageLabel = new JLabel("Don't turn off your PC. This will take a while.", SwingConstants.CENTER);
            messageLabel.setForeground(Color.WHITE);
            messageLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            messageLabel.setBounds(0, screenHeight / 2 - 20, screenWidth, 30);
            mainPanel.add(messageLabel);

            JLabel restartLabel = new JLabel("Your PC may restart several times", SwingConstants.CENTER);
            restartLabel.setForeground(Color.WHITE);
            restartLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            restartLabel.setBounds(0, screenHeight - 50, screenWidth, 30);
            mainPanel.add(restartLabel);

            SpinnerPanel spinner = new SpinnerPanel();
            spinner.setBounds(screenWidth / 2 - 25, screenHeight / 2 - 130, 50, 50); 
            mainPanel.add(spinner);

            frame.add(mainPanel);
            frame.setVisible(true);

            new Thread(() -> {
                int progress = 0;
                while (progress <= 100) {
                    final int currentProgress = progress;
                    SwingUtilities.invokeLater(() -> progressLabel.setText("Working on updates " + currentProgress + "% complete."));
                    progress++;
                    try {
                        Thread.sleep(10000); 
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        });
    }
    
    
    
    static class SpinnerPanel extends JPanel {
        private final int totalDots = 12; 
        private final int visibleDots = 6; 
        private final int dotSize = 6; 
        private final double radius = 20; 
        private double rotationAngle = 0; 
        private double angularVelocity = Math.toRadians(6);

        public SpinnerPanel() {
            setOpaque(false);

            Timer timer = new Timer(17, e -> {
                rotationAngle += angularVelocity;
                if (rotationAngle >= Math.PI * 2) {
                    rotationAngle -= Math.PI * 2;
                }
                repaint();
            });
            timer.start();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            int centerX = getWidth() / 2;
            int centerY = getHeight() / 2;

            for (int i = 0; i < totalDots; i++) {
                double angle = rotationAngle + Math.toRadians(i * (360.0 / totalDots));
                int x = centerX + (int) (radius * Math.cos(angle));
                int y = centerY + (int) (radius * Math.sin(angle));
                double relativeAngle = (angle - rotationAngle + Math.PI * 2) % (Math.PI * 2);
                int relativeIndex = (int) Math.round(relativeAngle / (Math.PI * 2) * totalDots);
                if (relativeIndex < visibleDots) {
                    float alpha = (float) relativeIndex / visibleDots;
                    int size = (int) (dotSize * (1.0 + alpha));
                    g2d.setColor(new Color(1.0f, 1.0f, 1.0f, alpha));
                    g2d.fillOval(x - size / 2, y - size / 2, size, size);
                }
            }
            g2d.dispose();
        }
    }
}
